# Generated by Django 4.0.6 on 2022-07-15 04:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import webapp.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('address', models.CharField(max_length=100)),
                ('mobile_no', models.CharField(max_length=100)),
                ('profile', models.ImageField(upload_to='images/profiles')),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('website', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(db_index=True, validators=[webapp.validators.validate_year])),
                ('room', models.CharField(db_index=True, max_length=5)),
                ('cr', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='semester', related_query_name='has_semester', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Routine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starts', models.TimeField()),
                ('ends', models.TimeField()),
                ('day_of_week', models.CharField(choices=[('sun', 'Sunday'), ('mon', 'Monday'), ('tue', 'Tuesday'), ('wed', 'Wednesday'), ('thu', 'Thursday'), ('fri', 'Friday')], db_index=True, max_length=3)),
                ('created_on', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_on', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routine', related_query_name='has_routine', to='webapp.semester')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routine', related_query_name='has_routine', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('starts',),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('csit', 'BSc Computer Science and Information Technology'), ('bca', 'Bachelor of Computer Application'), ('coer', 'Computer Engineering'), ('eer', 'Electrical Engineering'), ('mer', 'Mechanical Engineering'), ('cer', 'Civil Engineering')], db_index=True, max_length=4)),
                ('head', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department', related_query_name='has_department', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attendence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('p', 'Present'), ('a', 'Absent')], max_length=1)),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.now, editable=False)),
                ('routine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attendence', related_query_name='has_attendence', to='webapp.routine')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendence', related_query_name='has_attendence', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=100)),
                ('due_date', models.DateField(db_index=True, editable=False)),
                ('assigned_on', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment', related_query_name='has_assignment', to='webapp.semester')),
            ],
        ),
    ]
